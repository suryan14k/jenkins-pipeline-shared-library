#%RAML 1.0
baseUri: https://anypoint.mulesoft.com/designcenter/api-designer/
title: API Designer Experience API
version: 1.0
mediaType: application/json
description: |
  This is a RAML 1.0 API Specification of the API Designer Experience API. It defines the operations to       design and manage API Specification and API Fragments from Design Center. 

  The API enables you to work and handle the different resources when designing and managing a RAML API       Specification / Fragment. The operations included are the following.
    - List projects or create a new projects for a specific organization and owner.
    - Get an existing project and its details or delete an existing project.
    - List branches or create new ones for a specific project.
    - Create, delete or modify files in a specific branch.
    - Publish to Exchange or search for dependencies.

types:
  FileContents:           !include types/fileContents.raml
  FilePath:               !include types/filePath.raml
  FilesForm:              !include types/filesForm.raml
  Files:                  !include types/files.raml
  ProjectCreate:          !include types/projectCreate.raml
  Project:                !include types/project.raml
  Branch:                 !include types/branch.raml
  PublishExchange:        !include types/publishExchange.raml
  PublishResponse:        !include types/publishResponse.raml
  ExchangeAssetGAV:       !include types/exchangeAssetGAV.raml
  Lock:                   !include types/lock.raml
  UUID:                   !include types/uuid.raml
  
traits:
  commonHeaders: !include traits/user.raml
  secured: !include traits/secured.raml

/ping:
  get:
    description: to check if service is up
    responses:
      200:

/status:
  get:
    description: to check if service is up
    responses:
      200:

/projects:
  post:
    description: Creates a new project
    is: [commonHeaders, secured]
    body:
      type: ProjectCreate
    responses:
      201:
        body: Project
      409:
        description: Project {type}-{name} already exists
  get:
    description: Gets all the projects that the user has access
    is: [commonHeaders, secured]
    responses:
      200:
        body: Project[]
  /{projectId}:
    uriParameters:
      projectId:
        type: UUID
        description: Project unique ID
    get:
      description: Get project data
      is: [commonHeaders, secured]
      responses:
        200:
          body:
            type: Project
    delete:
      description: Deletes the given project
      is: [commonHeaders, secured]
      responses:
        204:
    /branches:
      post:
        description: Creates new branch
        is: [commonHeaders, secured]
        body:
          type: Branch
          description: Data of the branch to create
        responses:
          201:
            body:
              type: Branch
              description: Returns created branch
      get:
        description: List branches
        is: [commonHeaders, secured]
        responses:
          200:
            description: List of existing branches
            body: Branch[]
    /branches/{branch}:
      uriParameters:
        branch:
          type: string
          description: Branch name to which apply a given operation
          example: 'master'   
      delete:
        description: Deletes a branch
        is: [commonHeaders, secured]
        responses:
          204:
      /open:
        post:
          description: List project files. If user's workingDir does not exists, it creates one.
          is: [commonHeaders, secured]
          responses:
            200:
              body:
                type: Files
      /clean:
        post:
          description: cleans uncommited files from users workingDir
          is: [ commonHeaders, secured ]
          responses:
            200:
      /status:
        get:
          description: list WorkingDir status
          is: [ commonHeaders, secured ]
          responses:
            200:
      /save:
        post:
          description: save listed files (save and save All)
          is: [ commonHeaders, secured ]
          body:
            type: FileContents            
          responses:
            200:
              body:
                type: Files
            409:
              description: Could not save changes
        /v2:
          post:
            description: |
              Save listed files (save and save All).
              Accepts any file as body's content-type can be multipart/form-data
            is: [ commonHeaders, secured ]
            body:
              multipart/form-data:
                type: FilesForm
              application/json:
                type: FileContents
            responses:
              200:
                body:
                  type: Files
              409:
                description: Could not save changes
      # /logs:
      #   get:
      #     queryParameters:
      #       from:
      #         description: from commit, default 1.
      #       size:
      #         description: count of commits to be returned, default 10.
      #     description: list logs of project
      #     responses:
      #       201:
      #         body:
      #           type: Logs
      #           example: !include examples/logs.json
        # /{commitId}:
        #   get:
        #     description: it returns the list of files involved in given commit
        #     is: [ commonHeaders ]
        #     responses:
        #       200:
        #         body:
        #           type: files
        #           example: !include examples/files.json
      /files:
        get:
          description: Gets a list of the structure of the file system (open project)
          is: [ commonHeaders, secured ]
          responses:
            200:
              body:
                type: Files
        /v2/{filePath}:
          uriParameters:
            filePath:
              type: string
              description: File Path to retrieve. Must be URI complain and escape '/' characters
          get:
            description: Returns the given file (getFile) with content-type according to file's content
            is: [ commonHeaders, secured ]
            responses:
              200:
                body:
                  "*/*": 
        /{filePath}:
          uriParameters:
            filePath:
              type: string
              description: File Path to retrieve. Must be URI complain and escape '/' characters
          description: Operations over a specific file path
          get:
            description: Returns the given file (getFile) in application/json format
            is: [ commonHeaders, secured ]
            responses:
              200:
                body:
                  application/json:
          delete:
            description: Deletes the given file or folder and commit changes (deleteFile)
            is: [ commonHeaders, secured ]
            responses:
              204:
          /move:
            post:
              description: renames the file or folder (move or rename)
              is: [ commonHeaders, secured ]
              body:
                type: FilePath
              responses:
                200:
                  description: File was moved successfully
                400:
                  description: The destination path should be different than the source path
                404:
                  description: File not found
                409:
                  description: The file or folder already exists
          # /logs:
          #   get:
          #     queryParameters:
          #       from:
          #         description: from commit, default 1.
          #       size:
          #         description: count of commits, default 10.
          #     description: list logs of the file
          #     responses:
          #       201:
          #         body:
          #           type: Logs
          #           example: !include examples/logs.json
          #   /{commitId}:
          #     get:
          #       description: it returns the file in the given commit
          #       responses:
          #         200:
          #           body:
          #             "*/*":
      /acquireLock:
        post:
          description: Acquire lock for given project
          is: [ commonHeaders, secured ]
          body:
          responses:
            200:
              body: Lock
      /releaseLock:
        post:
          description: Release lock for given project
          is: [ commonHeaders, secured ]
          body:
          responses:
            200:
      /publish/platform:
        post:
          is: [ commonHeaders, secured ]
          description: Publish project to Api Platform
          body:
          responses:
            200:
      /publish/exchange:
        post:
          description: Publish project to Exchange. As a result, an Exchange asset is created.
          is: [ commonHeaders, secured ]
          body:
            type: PublishExchange
          responses:
            200:
              body:
                type: PublishResponse
      /exchange/dependencies:
        put:
          description: Add new dependencies in exchange.json
          is: [ commonHeaders, secured  ]
          body:
            type: ExchangeAssetGAV[]
            example:
              [{ "groupId": "gid",
                "assetId": "aid",
                "version": "1.0.0"
              }]
          responses:
            200:
              body:
                type: Files
        post:
          description: Updates exchange.json file, with given dependencies
          is: [ commonHeaders, secured  ]
          body:
            type:
              properties:
                add: ExchangeAssetGAV[]
                remove: ExchangeAssetGAV[]
            example:
              {"add": [
                { "groupId": "gid",
                  "assetId": "aid",
                  "version": "1.0.1"
                }
              ],
              "remove": [
                { "groupId": "gid",
                  "assetId": "aid",
                  "version": "1.0.0"
                }
              ]}
          responses:
            200:
        delete:
          description: Removes dependencies in exchange.json
          is: [ commonHeaders, secured  ]
          body:
            type: ExchangeAssetGAV[]
            example:
              [{ 
                "groupId": "gid",
                "assetId": "aid",
                "version": "1.0.1"
              }]
          responses:
            204:
    /api/{name}:
        get:
          description: Get api data, from Api Platform, for given {name}
          responses:
            200:
        /{version}:
          post:
            description: Publish project to Api Platform (Deprecated)
            responses:
              200:
/exchange/graphql:
  post:
    description: Executes GQL queries against exchange GraphQL service
    is: [ secured ]
    body:
      description: query to be performed
      example: |
          "{  assets(query: {type: 'raml'}) {groupId    assetId    version    name    type    organizationId  }}"
    responses:
      200:


